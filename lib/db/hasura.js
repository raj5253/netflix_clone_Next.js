export async function isNewUser(token, issuer) {
  const operationsDoc = `
  query isNewUserQuery($issuer: String!) {
    users(where: {issuer: {_eq: $issuer }}) {
      email
      id
      issuer
      publicAddress
    }
  }
`;
  const response = await queryHasuraGQL(
    operationsDoc,
    "isNewUserQuery",
    { issuer: issuer },
    token
  );
  // console.log({ response, issuer });
  return response?.data?.users?.length === 0; //returns a boolean
}

export async function createNewUser(token, metadata) {
  const operationsDoc = `
  mutation createNewUser($issuer: String!, $email: String!, $publicAddress : String!) {
    insert_users(objects: {email: $email, issuer: $issuer, publicAddress: $publicAddress}) {
      returning{
        email
        id
        issuer
      }
    }
  }
`;

  const { issuer, email, publicAddress } = metadata;

  const response = await queryHasuraGQL(
    operationsDoc,
    "createNewUser",
    { issuer, email, publicAddress },
    token
  );
  console.log({ response, issuer });
  return response;
}

export async function queryHasuraGQL(
  operationsDoc,
  operationName,
  variables,
  token
) {
  try {
    const result = await fetch(process.env.NEXT_PUBLIC_HASURA_ADMIN_URL, {
      method: "POST",
      headers: {
        // "x-hasura-admin-secret": process.env.NEXT_PUBLIC_HASURA_ADMIN_SECRET,
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        query: operationsDoc,
        variables: variables,
        operationName: operationName,
      }),
    });

    return await result.json();
  } catch (error) {
    console.log("error in hasura.js :" + error);
    return { error: "erorin hasura.js" };
  }
}
export async function findVideoIdByUser(token, userId, videoId) {
  const operationsDoc = `
  query findVideoIdByUserId ($userId: String! , $videoId: String! ) {
    stats(where: {userId: {_eq: $userId} , videoId: {_eq: $videoId}}) {
      favourited
      id
      userId
      videoId
      watched
    }
  }
`;

  const response = await queryHasuraGQL(
    operationsDoc,
    "findVideoIdByUserId",
    { videoId, userId },
    token
  );
  console.log({ response });

  return response?.data?.stats;
  // return response;
}

const operationsDoc1 = `
mutation insertStats($favourited: Int! , $userId: String!, $videoId: String! , $watched : Boolean!) insert_stats_one( object: {favourited: $favourited , userId: $userId, videoId: $videoId, watched: $watched}) {
  favourited
  id
  userId
}
`;

export async function updateStats(
  token,
  { favourited, userId, videoId, watched }
) {
  const operationsDoc = `
  mutation updateStats ( $favourited: Int!, $userId: String!, $videoId: String! , $watched : Boolean!){
  update_stats(
      where: {userId: {_eq: $userId }, videoId: {_eq: $videoId }},
      _set: { watched: $watched , favourited: $favourited}) 
    {
      returning {
        favourited,
        userId,
        watched,
        videoId
      }
  }
}`;

  const response = await queryHasuraGQL(
    operationsDoc,
    "updateStats",
    { favourited, userId, watched, videoId },
    token
  );
  return response;
}

export async function insertStats(
  token,
  { favourited, userId, videoId, watched }
) {
  const operationsDoc = `
    mutation insertStats($favourited: Int! , $userId: String!, $videoId: String! , $watched : Boolean!) {
      insert_stats_one(object: {favourited: $favourited , userId: $userId, videoId: $videoId, watched: $watched}) {
          favourited
          id
          userId
      }
    }`;

  const response = await queryHasuraGQL(
    operationsDoc,
    "insertStats",
    { favourited, userId, videoId, watched },
    token
  );
  return response;
}

export async function getWatchedVideos(userId, token) {
  const operationsDoc = `
  query watchedVideos($userId: String!) {
    stats(where: {watched: {_eq: true}, userId: {_eq: $userId}}) {
      videoId
      watched
    }
  }
`;
  const response = await queryHasuraGQL(
    operationsDoc,
    "watchedVideos",
    { userId },
    token
  );
  return response?.data?.stats;
}

export async function getMyListVideos(userId, token) {
  //the video liked by that user
  const operationsDoc = `
  query likedVideos($userId: String! ) {
    stats(where: {userId: {_eq: $userId}, favourited: {_eq: 1}}) {
      videoId
    }
  }
`;
  const response = await queryHasuraGQL(
    operationsDoc,
    "likedVideos",
    { userId },
    token
  );
  return response?.data?.stats;
}

/*
for diffrent x-hasura-user-id( ie, raj and satyam) , you get different  JST token.  And so, you get data corresponding to that  x-hasura-user-id.we are also addding public address as "name" in the encoding, but still main focus is on x-hasura-user-id (as in future this is will generated by magic(will causes them to be unique).
*/

/* I face error :
resolved by :         "Content-Type": "application/json" was written as"Content/type"
*/
