/*
This is an example snippet - you should consider tailoring it
to your service.
*/

export async function isNewUser(token, issuer) {
  const operationsDoc = `
  query isNewUserQuery($issuer: String!) {
    users(where: {issuer: {_eq: $issuer }}) {
      email
      id
      issuer
      publicAddress
    }
  }
`;
  const response = await queryHasuraGQL(
    operationsDoc,
    "isNewUserQuery",
    { issuer: issuer },
    token
  );
  console.log({ response, issuer });
  return response?.data?.users?.length === 0; //returns a boolean
}

export async function createNewUser(token, metadata) {
  const operationsDoc = `
  mutation createNewUser($issuer: String!, $email: String!, $publicAddress : String!) {
    insert_users(objects: {email: $email, issuer: $issuer, publicAddress: $publicAddress}) {
      returning{
        email
        id
        issuer
      }
    }
  }
`;

  const { issuer, email, publicAddress } = metadata;
  const response = await queryHasuraGQL(
    operationsDoc,
    "createNewUser",
    { issuer, email, publicAddress },
    token
  );
  console.log({ response, issuer });
  // return response?.data?.users?.length === 0; //returns a boolean
  return response;
}

export async function queryHasuraGQL(
  operationsDoc,
  operationName,
  variables,
  token
) {
  try {
    const result = await fetch(process.env.NEXT_PUBLIC_HASURA_ADMIN_URL, {
      method: "POST",
      headers: {
        // "x-hasura-admin-secret": process.env.NEXT_PUBLIC_HASURA_ADMIN_SECRET,
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        query: operationsDoc,
        variables: variables,
        operationName: operationName,
      }),
    });

    return await result.json();
  } catch (error) {
    console.log("error in hasura.js :" + error);
    return { error: "erorin hasura.js" };
  }
}

/*
  const operationsDoc = `
  query MyQuery {
    users(where: {issuer: {_eq: "did:ethr:0x46A78b352F31F2966Fb08a6C483a5A3C11a276B5"}}) {
      email
      id
      issuer
      publicAddress
    }
  }
  */
/*
function fetchMyQuery() {
  return queryHasuraGQL(
    operationsDoc,
    "MyQuery",
    {},
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3N1ZXIiOiJkaWQ6ZXRocjoweDQ2QTc4YjM1MkYzMUYyOTY2RmIwOGE2QzQ4M2E1QTNDMTFhMjc2QjUiLCJwdWJsaWNBZGRyZXNzIjoiMHg0NkE3OGIzNTJGMzFGMjk2NkZiMDhhNkM0ODNhNUEzQzExYTI3NkI1IiwiZW1haWwiOiJzYXR5YW1yYWoyMzU4QGdtYWlsLmNvbSIsIm9hdXRoUHJvdmlkZXIiOm51bGwsInBob25lTnVtYmVyIjpudWxsLCJ3YWxsZXRzIjpbXSwiaWF0IjoxNjgyMjU1NjU1LCJleHAiOjE2ODI4NjA0NTUsImh0dHBzOi8vaGFzdXJhLmlvL2p3dC9jbGFpbXMiOnsieC1oYXN1cmEtYWxsb3dlZC1yb2xlcyI6WyJ1c2VyIiwiYWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoidXNlciIsIngtaGFzdXJhLXVzZXItaWQiOiJkaWQ6ZXRocjoweDQ2QTc4YjM1MkYzMUYyOTY2RmIwOGE2QzQ4M2E1QTNDMTFhMjc2QjUifX0.Nf39N_9hCFbAnVGMArpItLMq8lnRs-K-i1cTCUUoDRs"
  );
}
*/

/* //no longer needed bc,isNewUser() is created
export async function startFetchMyQuery() {
  const { errors, data } = await fetchMyQuery();

  if (errors) {
    // handle those errors like a pro
    console.error(errors);
  }

  // do something great with this precious data
  console.log("data of hasura-fetch: ", data);
}
*/

// startFetchMyQuery();

// 3 ways to export
// module.exports
// export default
// export const function f_name (){}

// stats {
//   favourited
//   id
//   userId
//   videoId
//   watched
// }

/*
for diffrent x-hasura-user-id( ie, raj and satyam) , you get different  JST token.  And so, you get data corresponding to that  x-hasura-user-id.we are also addding public address as "name" in the encoding, but still main focus is on x-hasura-user-id (as in future this is will generated by magic(will causes them to be unique).
*/

/* I face error :
resolved by :         "Content-Type": "application/json" was written as"Content/type"
*/
